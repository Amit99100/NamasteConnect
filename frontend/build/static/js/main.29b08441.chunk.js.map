{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/ChatLoading.js","components/miscellaneous/SideDrawer.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","_ref","children","searchResult","setSearchResult","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","_jsx","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","_jsxs","VStack","spacing","FormControl","id","isRequired","FormLabel","Input","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","config","headers","data","axios","post","setItem","stringify","error","description","response","message","isLoading","Signup","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","p","accept","pics","undefined","console","log","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","window","location","reload","setTimeout","Homepage","Container","maxW","color","centerContent","Box","mt","shadow","bg","c","w","borderRadius","borderWidth","className","Text","fontSize","fontWeight","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","isSameSenderMargin","messages","m","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","d","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","fontFamily","justifyContent","ModalCloseButton","ModalBody","flexDir","alignItems","Image","boxSize","src","alt","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","Avatar","mr","cursor","backgroundColor","concat","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","ChatLoading","Stack","Skeleton","height","SideDrawer","search","setSearch","loadingChat","setLoadingChat","accessChat","Authorization","token","find","Menu","MenuButton","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","chat","filter","n","isGroupChat","chatName","as","rightIcon","ChevronDownIcon","MenuDivider","logoutHandler","removeItem","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","pb","get","UserListItem","Spinner","ml","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","renameloading","setRenameLoading","handleAddUser","u","user1","groupAdmin","put","chatId","handleRemove","flexWrap","query","handleSearch","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","io","on","newMessageRecieved","includes","ArrowBackIcon","toUpperCase","overflowY","alignSelf","margin","onKeyDown","event","key","Lottie","options","marginBottom","lastTypingTime","Date","getTime","getSenderFull","Chatbox","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","sel","slice","handleGroup","userToAdd","MyChats","setLoggedUser","fetchChats","lg","AddIcon","latestMessage","substring","Chatpage","App","Route","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","ChakraProvider","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.29b08441.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\n//to provide that context to whole our app . \nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [searchResult, setSearchResult] = useState([]);\n  const [selectedChat, setSelectedChat] = useState();\n  const [user, setUser] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState();\n\n\n  const history = useHistory();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) history.push(\"/\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [history]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        user,\n        setUser,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n        searchResult,\n        setSearchResult\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport { useHistory } from \"react-router-dom\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nconst Login = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const history = useHistory();\n  const { setUser } = ChatState();\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n\n      const { data } = await axios.post(\n        \"/api/user/login\",\n        { email, password },\n        config\n      );\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setLoading(false);\n      history.push(\"/chats\");\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    // vertical stack is used from chakra ui . \n    <VStack spacing=\"10px\">\n\n      {/* For Email  */}\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n\n        {/* For Password  */}\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n\n          {/* Button for show and hide  */}\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n\n      {/* Button for login */}\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { useHistory } from 'react-router-dom';\n\n\nconst Signup = () => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const history = useHistory();\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [picLoading, setPicLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setPicLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      };\n      const { data } = await axios.post(\n        \"/api/user\",\n        {\n          name,\n          email,\n          password,\n          pic,\n        },\n        config\n      );\n      console.log(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      //storing in local storage userInfo and data \n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\n      setPicLoading(false);\n      //if loged in push to chats page . \n      history.push(\"/chats\");\n\n      function refreshPage() {\n        window.location.reload();\n      }\n\n\n      refreshPage();\n\n\n      setTimeout(() => {\n\n        history.push(\"/chats\");\n      }, 1000)\n\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n    }\n  };\n\n  const postDetails = (pics) => {\n    setPicLoading(true);\n    if (pics === undefined) {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n    console.log(pics);\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\n      const data = new FormData();\n      data.append(\"file\", pics);\n      data.append(\"upload_preset\", \"chat-app\");\n      data.append(\"cloud_name\", \"dx428yl39\");\n      const myapiurl = \"https://api.cloudinary.com/v1_1/dx428yl39/image/upload\"\n      fetch(myapiurl, {\n        method: \"post\",\n        body: data,\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setPic(data.url.toString());\n          console.log(data.url.toString());\n          setPicLoading(false);\n        })\n        .catch((err) => {\n          console.log(err);\n          setPicLoading(false);\n        });\n    } else {\n      toast({\n        title: \"Please Select an Image!\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setPicLoading(false);\n      return;\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl id=\"first-name\" isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"email\" isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Picture</FormLabel>\n        <Input\n          type=\"file\"\n          p={1.5}\n          accept=\"image/*\"\n          onChange={(e) => postDetails(e.target.files[0])}\n        />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={picLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n} from \"@chakra-ui/react\";\nimport { useEffect } from \"react\";\nimport { useHistory } from \"react-router\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport { black } from \"colors\";\n\nfunction Homepage() {\n  const history = useHistory();\n\n  useEffect(() => {\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\n\n    if (user) history.push(\"/chats\");\n  }, [history]);\n\n\n\n  return (\n    // it will make responsive , when mobile and pc ( so i used container here . )\n    //maxwidth xl( xtra larage . )\n    //content will center . \n    <Container maxW=\"xl\" color=\"white\" centerContent>\n\n\n      <Box mt={\"5%\"} shadow=\"dark-lg\" bg={\"white\"} color={\"black\"} c=\"black\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"2px\" className=\"login_box\">\n        {/* <Text m={\"1rem\"} color=\"black\" fontSize=\"4xl\" fontFamily=\"Georgia\" >\n          NamasteConnect\n        </Text> */}\n        <Text fontSize=\"3xl\" fontWeight=\"bold\" color=\"teal.500\">\n          Welcome to NamasteConnect\n        </Text>\n        <Text fontSize=\"lg\" color=\"gray.500\">\n          Connect with the people you care about 😊\n        </Text>\n\n        <Tabs isFitted variant=\"solid-rounded\" colorScheme=\"teal\">\n          <TabList mb=\"1em\" mt=\"1em\">\n            <Tab fontWeight=\"bold\">Login</Tab>\n            <Tab fontWeight=\"bold\">Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login />\n            </TabPanel>\n            <TabPanel>\n              <Signup />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n\n      </Box>\n\n    </Container >\n\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Image,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"150px\"\n              src={user.pic}\n              alt={user.name}\n            />\n            <Text\n              fontSize={{ base: \"28x\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst ScrollableChat = ({ messages }) => {\n  const { user } = ChatState();\n\n  return (\n    <ScrollableFeed >\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n                <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                  <Avatar\n                    mt=\"7px\"\n                    mr={1}\n                    size=\"sm\"\n                    cursor=\"pointer\"\n                    name={m.sender.name}\n                    src={m.sender.pic}\n\n                  />\n                </Tooltip>\n              )}\n            <span\n              style={{\n                backgroundColor: `${m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\n                  }`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 2 : 8,\n                borderRadius: \"5px\",\n                padding: \"4px 10px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport ProfileModal from \"./ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport { getSender } from \"../../config/ChatLogics\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\n\nfunction SideDrawer() {\n  const [search, setSearch] = useState(\"\");\n  // const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const {\n    setSelectedChat,\n    user,\n    notification,\n    setNotification,\n    chats,\n    setChats,\n    searchResult,\n    setSearchResult\n  } = ChatState();\n\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    history.push(\"/\");\n  };\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n\n      setLoading(false);\n\n      setSearchResult(data);\n\n\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 3000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <Box\n        d=\"flex\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p=\"5px 10px 5px 10px\"\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\n          <Button variant=\"ghost\" onClick={onOpen}>\n            <i className=\"fas fa-search\"></i>\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\n          Namaste Connect\n        </Text>\n        <div>\n          <Menu>\n            <MenuButton p={1}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" m={1} />\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box d=\"flex\" pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default SideDrawer;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport searchResult from \"../../components/miscellaneous/SideDrawer\"\nconst UserListItem = ({ handleFunction, user }) => {\n  // const { user } = ChatState(); // this is some bug ( found out after 3 hours . )\n\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n\n        background: \"blue\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat, user } = ChatState();\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\n// const ENDPOINT = \"http://localhost:5000\"; // \"https://namasteconnect.herokuapp.com\"; -> After deployment\nconst ENDPOINT = \"https://namasteconnect.onrender.com\";\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\n    ChatState();\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      socket.emit(\"stop typing\", selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n        setNewMessage(\"\");\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat,\n          },\n          config\n        );\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          status: \"error\",\n          duration: 5000,\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            bg=\"grey\"\n            color=\"black\"\n            w=\"100%\"\n            h=\"100%\"\n            // borderRadius=\"\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={sendMessage}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <Input\n                bg=\"black\"\n                color=\"white\"\n                placeholder=\"Type a message\"\n                value={newMessage}\n                onChange={typingHandler}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      // p={3}\n      bg=\"black\"\n      color=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n    // borderRadius=\"lg\"\n    // borderWidth=\"5px\"\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { user, chats, setChats } = ChatState();\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        config\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: Amit, sumit, Rahul\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { getSender } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const [loggedUser, setLoggedUser] = useState();\n\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\n\n  const toast = useToast();\n\n  const fetchChats = async () => {\n    // console.log(user._id);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      //fetching chat data \n      const { data } = await axios.get(\"/api/chat\", config);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      alignItems=\"center\"\n      p={3}\n      bg=\"black\"\n      w={{ base: \"100%\", md: \"35%\" }}\n      // borderRadius=\"lg\"\n      // borderWidth=\"1px\"\n      color=\"white\"\n    >\n      <Box\n        pb={3}\n        px={3}\n        fontSize={{ base: \"28px\", md: \"30px\" }}\n        fontFamily=\"Work sans\"\n        d=\"flex\"\n        w=\"100%\"\n        bg=\"black\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      >\n        My chat\n        <GroupChatModal>\n          <Button\n            d=\"flex\"\n            bg=\"blue\"\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"15px\" }}\n            rightIcon={<AddIcon />}\n          >\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        p={3}\n        bg=\"black\"\n        w=\"100%\"\n        h=\"100%\"\n        // borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                // borderRadius=\"lg\"\n                key={chat._id}\n              >\n                <Text>\n                  {!chat.isGroupChat\n                    ? getSender(loggedUser, chat.users)\n                    : chat.chatName}\n                </Text>\n                {chat.latestMessage && (\n                  <Text fontSize=\"xs\">\n                    <b>{chat.latestMessage.sender.name} : </b>\n                    {chat.latestMessage.content.length > 50\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                      : chat.latestMessage.content}\n                  </Text>\n                )}\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const { user } = ChatState();\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      {/* if user is there then render Sidedrawer  */}\n      {user && <SideDrawer />}\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\n\n        {/* if user is there then render Mychats  */}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n        {user && <MyChats fetchAgain={fetchAgain} />}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport { Route } from \"react-router-dom\";\nimport Chatpage from \"./Pages/Chatpage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* if  i will not give exact it will render what ever path will come in ones path like\n      in /chats path / also coming so both will get render , so to avoid this  ,  i need to \n      provide exact paths.  */}\n      <Route path=\"/\" component={Homepage} exact />\n      <Route path=\"/chats\" component={Chatpage} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  // chatProvider context api  to whole app . \n  <ChakraProvider >\n    <BrowserRouter>\n      <ChatProvider >\n        <App />\n      </ChatProvider>\n    </BrowserRouter>\n  </ChakraProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}